let restaurant;
var map;

document.addEventListener('DOMContentLoaded', (event) => {
  initMap();
});

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = () => {
  fetchRestaurantFromURL((error, restaurant) => {
  if (error) { // Got an error!
      console.error(error);
    } else {
      let loc = [restaurant.latlng.lat * 1.0003,restaurant.latlng.lng];
      map = L.map('map', { zoomControl:false }).setView(loc, 12); //* leaflet code
      map.scrollWheelZoom.disable() // Turn off stupid scrolling
      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
        subdomains: 'abcd',
        maxZoom: 19
      }).addTo(map)

      fillBreadcrumb();
      var marker = L.marker([restaurant.latlng.lat,restaurant.latlng.lng]).addTo(map);
    }
  });
}

/**
 * Get current restaurant from page URL.
 */
fetchRestaurantFromURL = (callback) => {
  if (self.restaurant) { // restaurant already fetched!
    callback(null, self.restaurant)
    return;
  }
  const id = getParameterByName('id');
  if (!id) { // no id found in URL
    error = 'No restaurant id in URL'
    callback(error, null);
  } else {
    DBHelper.fetchRestaurantById(id, (error, restaurant) => {
      self.restaurant = restaurant;

      if (!restaurant) {
        console.error(error);
        return;
      }
      DBHelper.fetchReviewsById(id, (error, reviews) => {
        // Add the reviews generated by the db fetch to the restaurant object
        self.restaurant.reviews = reviews;
        if (!reviews) {
          console.error(error);
          return;
        }

        fillRestaurantHTML();
        callback(null, restaurant)
      });
    });
  }
}
/**
 * Create restaurant HTML and add it to the webpage
 */
fillRestaurantHTML = (restaurant = self.restaurant) => {
  const name = document.getElementById('restaurant-name');
  name.innerHTML = restaurant.name;

  const address = document.getElementById('restaurant-address');
  address.innerHTML = restaurant.address;

  const image = document.getElementById('restaurant-img');
  image.className = 'restaurant-img';
  image.alt = restaurant.name + ' restaurant'
  image.src = DBHelper.imageUrlForRestaurant(restaurant);

  const cuisine = document.getElementById('restaurant-cuisine');
  cuisine.innerHTML = restaurant.cuisine_type;

  // fill operating hours
  if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  }

  // fill reviews
  fillReviewsHTML();
}

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {
  const hours = document.getElementById('restaurant-hours');
  for (let key in operatingHours) {
    const row = document.createElement('tr');

    const day = document.createElement('td');
    day.innerHTML = key;
    row.appendChild(day);

    const time = document.createElement('td');
    time.innerHTML = operatingHours[key];
    row.appendChild(time);

    hours.appendChild(row);
  }
}

/**
 * Create all reviews HTML and add them to the webpage.
 */
fillReviewsHTML = (reviews = self.restaurant.reviews) => {
  const container = document.getElementById('reviews-container');
  const title = document.createElement('h2');
  title.innerHTML = 'Reviews';
  container.appendChild(title);

  if (!reviews) {
    const noReviews = document.createElement('p');
    noReviews.innerHTML = 'No reviews yet!';
    container.appendChild(noReviews);
    return;
  }
  const ul = document.getElementById('reviews-list');
  ul.appendChild(createFormHTML())
  reviews.forEach(review => {
    ul.appendChild(createReviewHTML(review));
  });
  container.appendChild(ul);
}
// Long code to create form, need to shorten
createFormHTML = () => {
  const li = document.createElement('li');
  li.className = 'submission';
  const div = document.createElement('div'); 
  div.className = 'review-form-container';
  const head = document.createElement('div');
  head.className = "review-form-headline";
  const headp = document.createElement('p');
  headp.innerText = 'Submit a review';
  head.appendChild(headp);
  div.appendChild(head);

  const form = document.createElement('form');
  form.className = 'review-form';
  const labelp = document.createElement('p');
  const label = document.createElement('label');
  label.innerText = 'Name:'
  label.for = 'name';
  labelp.appendChild(label);
  const nameInput = document.createElement('input');
  nameInput.id = 'name';
  nameInput.name = 'name';
  nameInput.type = 'text';
  labelp.appendChild(nameInput);
  nameInput.required = true;
  form.appendChild(labelp);

  const ratingp = document.createElement('p');
  const ratingLabel = document.createElement('label');
  ratingLabel.innerText = 'Rate your dining experience: ';
  ratingLabel.for = 'rating';
  ratingp.appendChild(ratingLabel);
  const select = document.createElement('select');
  select.name = 'rating'
  const one = document.createElement('option');
  one.value = '1';
  one.innerText = '1';
  select.appendChild(one);
  const two = document.createElement('option');
  two.value = '2';
  two.innerText = '2';
  select.appendChild(two);
  const three = document.createElement('option');
  three.value = '3';
  three.innerText = '3';
  select.appendChild(three);
  const four = document.createElement('option');
  four.value = '4';
  four.innerText = '4';
  select.appendChild(four);
  const five = document.createElement('option');
  five.value = '5';
  five.innerText = '5';
  select.appendChild(five);
  ratingp.appendChild(select)
  form.appendChild(ratingp);

  const descriptionp = document.createElement('p');
  const descriptionText = document.createElement('textarea');
  descriptionText.placeholder = 'Write your review here ';
  descriptionText.for = 'reviewText';
  descriptionText.name = 'comments';
  descriptionText.rows = '4';
  descriptionp.appendChild(descriptionText);
  descriptionText.required = true;
  form.appendChild(descriptionp);

  const inputp = document.createElement('p');
  const inputDiv = document.createElement('div');
  inputDiv.className = 'form-submit-container';
  const submit = document.createElement('input');
  submit.id = 'form-submit';
  submit.value = 'Submit';
  submit.type = 'submit';
  inputDiv.appendChild(submit);
  inputp.appendChild(inputDiv);
  form.appendChild(inputp);

  div.appendChild(form);
  li.appendChild(div);

  form.addEventListener("submit", function (e) {
    e.preventDefault();
    var review = {"restaurant_id": self.restaurant.id};
    review['rating'] = Date.now()
    review['createdAt'] = Date.now()
    review['updatedAt'] = Date.now()
    var formdata = new FormData(form);
    for (var [key, value] of formdata.entries()) {
      review[key] = value;
    }
    DBHelper.postReview(review)
      .then(data => {
        var ul = document.getElementById('reviews-list');
        ul.appendChild(createReviewHTML(review));
        form.reset();
      })
      .catch(error => console.error(error))
  });

  return li;
}

/**
 * Create review HTML and add it to the webpage.
 */
createReviewHTML = (review) => {
  const li = document.createElement('li');
  const name = document.createElement('p');
  name.className = 'review-name';
  name.innerText = review.name;
  li.appendChild(name);

  const date = document.createElement('p');
  date.innerHTML = new Date(review.updatedAt).toDateString();
  date.className = 'review-date'
  li.appendChild(date);

  const rating = document.createElement('p');

  rating.innerHTML = "&#9733;".repeat(+review.rating) + "&#9734;".repeat(5 - +review.rating);
  li.appendChild(rating);

  // Create the wrapper that allows for shortened comments that can be expanded
  const commentsWrapper = document.createElement('div');
  commentsWrapper.className = 'review-comments-wrapper';
  const commentsContainer = document.createElement('div');
  commentsContainer.className = 'review-comments-shortened';

  // Populate comments section
  const comment = document.createElement('p');
  comment.innerText = review.comments;
  li.appendChild(comment);

  return li;
}

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
fillBreadcrumb = (restaurant=self.restaurant) => {
  const breadcrumb = document.getElementById('breadcrumb');
  const li = document.createElement('li');
  li.innerHTML = restaurant.name;
  breadcrumb.appendChild(li);
}

/**
 * Get a parameter by name from page URL.
 */
getParameterByName = (name, url) => {
  if (!url)
    url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),
    results = regex.exec(url);
  if (!results)
    return null;
  if (!results[2])
    return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
